@model IEnumerable<MvcMovie.Models.Movie>

@{
    ViewBag.Title = "Index";
}

<!--
<head>
    <meta http-equiv="refresh" content="5">
</head>
-->

@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.1.min.js"></script>
    <!--<script src="~/Scripts/jquery-1.10.2.min.js"></script>-->
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    
    <script>
        function myFunction() { //this function reloads the webpage when called
            location.reload();
        }

        function sleep(time) {
            return new Promise((resolve) => setTimeout(resolve, time));
        }

        function notnew() {
            sleep(600000).then(() => {
                 document.getElementById("Newpragraph").innerHTML = "***************************";
                 document.getElementById("Newpragraph").style = "background-color: white; color: black";
            });
        }


        $(function () {
            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.chatHub;
            // Create a function that the hub can call back to display messages.
            chat.client.addNewMessageToPage = function (name, message) {
                /*
                $('#discussion') //comment out the part that adds new messages to the screen, we don't want 2 way communication
                    .append('<li><strong>' + htmlEncode(name) + '</strong>: ' + htmlEncode(message) + '</li>');
                */
                myFunction();
            };

            // Get the user name and store it to prepend to messages.

            //$('#displayname').val(prompt('Enter your name:', ''));
            $('#displayname').val("chatuser");

            // Set initial focus to message input box.
            $('#message').focus();
            // Start the connection.

            $.connection.hub.start()
                .done(function() {
                    $('#sendmessage') // this is the button ID
                        .click(function() { // this is what happends when we click the button

                            // Call the Send method on the hub.
                            chat.server.send($('#displayname').val(), $('#message').val());
                            // Clear text box and reset focus for next comment.
                            $('#message').val('').focus();
                        });
                });

        });
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
    </script>
}


<!--<h2>Index</h2>-->

<p>
    @Html.ActionLink("Create New", "Create")
</p>

<div id="mytable">
    <table class="table">
        <tr>
            <th>
                Agent Supervisor
                @*
                @Html.DisplayNameFor(model => model.Title)
                *@
            </th>
            <th>
                @*
                @Html.DisplayNameFor(model => model.ReleaseDate)
                *@
            </th>
            <th>
                
                @*
                @Html.DisplayNameFor(model => model.Genre)
                *@
            </th>
            <th>
                @*
                @Html.DisplayNameFor(model => model.Price)
                *@
            </th>
            <th></th>
        </tr>

        @{
            int counter = 0;
            foreach (var item in Model)
            {
                if (item.ID > counter)
                {
                    counter = item.ID;
                }
            }
        }

        @foreach (var item in Model)
        {
        @*
            I need to be able to display database entries only if their ID is the newest, displaying the time they were created aswell would be nice

            int x = 0;
            foreach (var item in Model)
            {

            }
        *@

            if (item.ID > (counter-5) && item.ID < counter)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Title)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ReleaseDate)
                    </td>
                    <td>
                        @*
                        @Html.DisplayFor(modelItem => item.Genre)
                        *@
                    </td>
                    <td>
                        @*
                        @Html.DisplayFor(modelItem => item.Price)
                        *@
                    </td>
                    <td>
                        @*
                        @Html.ActionLink("Edit", "Edit", new
                        {
                            id = item.ID
                        }) |
                        @Html.ActionLink("Details", "Details", new
                        {
                            id = item.ID
                        }) |
                        @Html.ActionLink("Delete", "Delete", new {id = item.ID})
                        *@
                    </td>
                </tr>

            }
            else if (item.ID == counter)
            {
                <tr>
                    <td>
                        <p style="background-color: powderblue; color :black">Current Message:</p>
                        @Html.DisplayFor(modelItem => item.Title)
                    </td>
                    <td>
                        @if (item.ReleaseDate.Date == DateTime.Today && item.ReleaseDate.Hour == DateTime.Now.Hour && item.ReleaseDate.Minute >= (DateTime.Now.Minute - 10))
                        {
                            <p id="Newpragraph" style="background-color: red; color: white">New!</p>
                        }
                        else
                        {
                            <p>***************************</p>
                        }

                        @Html.DisplayFor(modelItem => item.ReleaseDate)

                    </td>
                    <td>
                       
                    </td>
                </tr>
            }
        }

    </table>
</div>


<!-- <button onclick="notnew()">Not new anymore</button> -->

<body onload="notnew()"></body>

<!--<h2>Chat</h2>-->

<!--"Send" appears to be an existing method in signalr, is called in "connection hub start"
<div class="container">
    <input type="text" id="message" />
    <input type="button" id="sendmessage" value="Send" />
    <input type="hidden" id="displayname" />
    <ul id="discussion"></ul>
</div>
-->



