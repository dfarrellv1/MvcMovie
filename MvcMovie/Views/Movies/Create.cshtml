@model MvcMovie.Models.Movie

@{
    ViewBag.Title = "Create";
}


<!--


<body onload="hideaway()"></body>
-->


@section SpecialOther{
    @*
        put links to styles sheet CSS in here if you want them
        <link href="~/css/responsive-tables.css" rel="stylesheet"/>
    *@
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.1.min.js"></script>
    <!--<script src="~/Scripts/jquery-1.10.2.min.js"></script>-->
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->

    <script>
        function myFunction() { //this function reloads the webpage when called
            location.reload();
        }

        function hideaway() {
            /*
            document.getElementById("ReleaseDate").style.visibility = "hidden";
            document.getElementById("Genre").style.visibility = "hidden";
            document.getElementById("Price").style.visibility = "hidden";
            */
            document.getElementById("ReleaseDate").style.display = "none";
            document.getElementById("Genre").style.display = "none";
            document.getElementById("Price").style.display = "none";
        }

        $(function() {
            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.chatHub;
            // Create a function that the hub can call back to display messages.
            chat.client.addNewMessageToPage = function(name, message) {
                /*
                $('#discussion') //comment out the part that adds new messages to the screen, we don't want 2 way communication
                    .append('<li><strong>' + htmlEncode(name) + '</strong>: ' + htmlEncode(message) + '</li>');
                */
                //myFunction();
            };

            // Get the user name and store it to prepend to messages.

            //$('#displayname').val(prompt('Enter your name:', ''));
            $('#displayname').val("chatuser");

            // Set initial focus to message input box.
            $('#message').focus();
            // Start the connection.

            $.connection.hub.start()
                .done(function () {

                    chat.server.send($('#displayname').val(), $('#message').val());
                    // Clear text box and reset focus for next comment.
                    $('#message').val('').focus();

                    /*
                    $('#sendmessage') // this is the button ID
                        .click(function() { // this is what happends when we click the button

                            // Call the Send method on the hub.
                            chat.server.send($('#displayname').val(), $('#message').val());
                            // Clear text box and reset focus for next comment.
                            $('#message').val('').focus();
                    });
                    */
                });

            $(document).ready(function() { $('#sendmessage').click();});

        });

        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
    </script>
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal" align="left">
        <h4>Message Agents</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div id="Title" class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>


        <div id="ReleaseDate" class="form-group">
            @Html.LabelFor(model => model.ReleaseDate, htmlAttributes: new { @class = "control-label col-md-2" })
            @{
//how do I set releasedate as time.now?
//ahh you just have to set it in movies controller, in ActionResult "create"
            }
            <div class="col-md-10">
                @Html.EditorFor(model => model.ReleaseDate, new { htmlAttributes = new { @class = "form-control", @Value = "10/10/2016" } })
                @*
                    @Html.ValidationMessageFor(model => model.ReleaseDate, "", new { @class = "text-danger" })

                *@
                @Html.ValidationMessageFor(model => model.ReleaseDate, "", new { @class = "text-danger" })
            </div>
        </div>
        <script>document.getElementById("ReleaseDate").style.display = "none";</script>

        <div id="Genre" class="form-group">
            @Html.LabelFor(model => model.Genre, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Genre, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Genre, "", new { @class = "text-danger" })
            </div>
        </div>
        <script>document.getElementById("Genre").style.display = "none";</script>

        <div id="Price" class="form-group">
            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control", @Value = 9.99m } })
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
            </div>
        </div>
        <script>document.getElementById("Price").style.display = "none";</script>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Send" class="btn btn-default" />
            </div>
        </div>
    </div>
}


<div>
@*
    @Html.ActionLink("Back to List", "Index")
*@
</div>


<!--
<body onload="hideaway()"></body>
<body onload="document.getElementById('sendmessage').click();"></body>
-->

<div class="container">
    <!--<input type="text" id="message" />-->
    <!-- <input type="button" id="sendmessage" value="Send" /> --> <!--"Send" appears to be an existing method in signalr, is called in "connection hub start"-->
    <!--
    <input type="hidden" id="displayname" />
    <ul id="discussion"></ul>
    -->
</div>




